// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: models.proto

#include "models.pb.h"
#include "models.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace spike_x {

static const char* ModelsService_method_names[] = {
  "/spike_x.ModelsService/GetNeuronModels",
  "/spike_x.ModelsService/GetSynapseModels",
  "/spike_x.ModelsService/GetAxonModels",
  "/spike_x.ModelsService/GetDendriteModels",
};

std::unique_ptr< ModelsService::Stub> ModelsService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ModelsService::Stub> stub(new ModelsService::Stub(channel, options));
  return stub;
}

ModelsService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetNeuronModels_(ModelsService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSynapseModels_(ModelsService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAxonModels_(ModelsService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetDendriteModels_(ModelsService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ModelsService::Stub::GetNeuronModels(::grpc::ClientContext* context, const ::spike_x::ModelsRequest& request, ::spike_x::ModelsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::spike_x::ModelsRequest, ::spike_x::ModelsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetNeuronModels_, context, request, response);
}

void ModelsService::Stub::async::GetNeuronModels(::grpc::ClientContext* context, const ::spike_x::ModelsRequest* request, ::spike_x::ModelsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::spike_x::ModelsRequest, ::spike_x::ModelsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetNeuronModels_, context, request, response, std::move(f));
}

void ModelsService::Stub::async::GetNeuronModels(::grpc::ClientContext* context, const ::spike_x::ModelsRequest* request, ::spike_x::ModelsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetNeuronModels_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::spike_x::ModelsResponse>* ModelsService::Stub::PrepareAsyncGetNeuronModelsRaw(::grpc::ClientContext* context, const ::spike_x::ModelsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::spike_x::ModelsResponse, ::spike_x::ModelsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetNeuronModels_, context, request);
}

::grpc::ClientAsyncResponseReader< ::spike_x::ModelsResponse>* ModelsService::Stub::AsyncGetNeuronModelsRaw(::grpc::ClientContext* context, const ::spike_x::ModelsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetNeuronModelsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ModelsService::Stub::GetSynapseModels(::grpc::ClientContext* context, const ::spike_x::ModelsRequest& request, ::spike_x::ModelsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::spike_x::ModelsRequest, ::spike_x::ModelsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetSynapseModels_, context, request, response);
}

void ModelsService::Stub::async::GetSynapseModels(::grpc::ClientContext* context, const ::spike_x::ModelsRequest* request, ::spike_x::ModelsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::spike_x::ModelsRequest, ::spike_x::ModelsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSynapseModels_, context, request, response, std::move(f));
}

void ModelsService::Stub::async::GetSynapseModels(::grpc::ClientContext* context, const ::spike_x::ModelsRequest* request, ::spike_x::ModelsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSynapseModels_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::spike_x::ModelsResponse>* ModelsService::Stub::PrepareAsyncGetSynapseModelsRaw(::grpc::ClientContext* context, const ::spike_x::ModelsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::spike_x::ModelsResponse, ::spike_x::ModelsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetSynapseModels_, context, request);
}

::grpc::ClientAsyncResponseReader< ::spike_x::ModelsResponse>* ModelsService::Stub::AsyncGetSynapseModelsRaw(::grpc::ClientContext* context, const ::spike_x::ModelsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetSynapseModelsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ModelsService::Stub::GetAxonModels(::grpc::ClientContext* context, const ::spike_x::ModelsRequest& request, ::spike_x::ModelsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::spike_x::ModelsRequest, ::spike_x::ModelsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetAxonModels_, context, request, response);
}

void ModelsService::Stub::async::GetAxonModels(::grpc::ClientContext* context, const ::spike_x::ModelsRequest* request, ::spike_x::ModelsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::spike_x::ModelsRequest, ::spike_x::ModelsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAxonModels_, context, request, response, std::move(f));
}

void ModelsService::Stub::async::GetAxonModels(::grpc::ClientContext* context, const ::spike_x::ModelsRequest* request, ::spike_x::ModelsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAxonModels_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::spike_x::ModelsResponse>* ModelsService::Stub::PrepareAsyncGetAxonModelsRaw(::grpc::ClientContext* context, const ::spike_x::ModelsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::spike_x::ModelsResponse, ::spike_x::ModelsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetAxonModels_, context, request);
}

::grpc::ClientAsyncResponseReader< ::spike_x::ModelsResponse>* ModelsService::Stub::AsyncGetAxonModelsRaw(::grpc::ClientContext* context, const ::spike_x::ModelsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetAxonModelsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ModelsService::Stub::GetDendriteModels(::grpc::ClientContext* context, const ::spike_x::ModelsRequest& request, ::spike_x::ModelsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::spike_x::ModelsRequest, ::spike_x::ModelsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetDendriteModels_, context, request, response);
}

void ModelsService::Stub::async::GetDendriteModels(::grpc::ClientContext* context, const ::spike_x::ModelsRequest* request, ::spike_x::ModelsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::spike_x::ModelsRequest, ::spike_x::ModelsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDendriteModels_, context, request, response, std::move(f));
}

void ModelsService::Stub::async::GetDendriteModels(::grpc::ClientContext* context, const ::spike_x::ModelsRequest* request, ::spike_x::ModelsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDendriteModels_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::spike_x::ModelsResponse>* ModelsService::Stub::PrepareAsyncGetDendriteModelsRaw(::grpc::ClientContext* context, const ::spike_x::ModelsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::spike_x::ModelsResponse, ::spike_x::ModelsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetDendriteModels_, context, request);
}

::grpc::ClientAsyncResponseReader< ::spike_x::ModelsResponse>* ModelsService::Stub::AsyncGetDendriteModelsRaw(::grpc::ClientContext* context, const ::spike_x::ModelsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetDendriteModelsRaw(context, request, cq);
  result->StartCall();
  return result;
}

ModelsService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ModelsService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ModelsService::Service, ::spike_x::ModelsRequest, ::spike_x::ModelsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ModelsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::spike_x::ModelsRequest* req,
             ::spike_x::ModelsResponse* resp) {
               return service->GetNeuronModels(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ModelsService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ModelsService::Service, ::spike_x::ModelsRequest, ::spike_x::ModelsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ModelsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::spike_x::ModelsRequest* req,
             ::spike_x::ModelsResponse* resp) {
               return service->GetSynapseModels(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ModelsService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ModelsService::Service, ::spike_x::ModelsRequest, ::spike_x::ModelsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ModelsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::spike_x::ModelsRequest* req,
             ::spike_x::ModelsResponse* resp) {
               return service->GetAxonModels(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ModelsService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ModelsService::Service, ::spike_x::ModelsRequest, ::spike_x::ModelsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ModelsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::spike_x::ModelsRequest* req,
             ::spike_x::ModelsResponse* resp) {
               return service->GetDendriteModels(ctx, req, resp);
             }, this)));
}

ModelsService::Service::~Service() {
}

::grpc::Status ModelsService::Service::GetNeuronModels(::grpc::ServerContext* context, const ::spike_x::ModelsRequest* request, ::spike_x::ModelsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ModelsService::Service::GetSynapseModels(::grpc::ServerContext* context, const ::spike_x::ModelsRequest* request, ::spike_x::ModelsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ModelsService::Service::GetAxonModels(::grpc::ServerContext* context, const ::spike_x::ModelsRequest* request, ::spike_x::ModelsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ModelsService::Service::GetDendriteModels(::grpc::ServerContext* context, const ::spike_x::ModelsRequest* request, ::spike_x::ModelsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace spike_x

