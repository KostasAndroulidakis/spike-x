// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: models.proto
#ifndef GRPC_models_2eproto__INCLUDED
#define GRPC_models_2eproto__INCLUDED

#include "models.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace spike_x {

// Το κεντρικό service για τα μοντέλα
class ModelsService final {
 public:
  static constexpr char const* service_full_name() {
    return "spike_x.ModelsService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetNeuronModels(::grpc::ClientContext* context, const ::spike_x::ModelsRequest& request, ::spike_x::ModelsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::spike_x::ModelsResponse>> AsyncGetNeuronModels(::grpc::ClientContext* context, const ::spike_x::ModelsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::spike_x::ModelsResponse>>(AsyncGetNeuronModelsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::spike_x::ModelsResponse>> PrepareAsyncGetNeuronModels(::grpc::ClientContext* context, const ::spike_x::ModelsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::spike_x::ModelsResponse>>(PrepareAsyncGetNeuronModelsRaw(context, request, cq));
    }
    virtual ::grpc::Status GetSynapseModels(::grpc::ClientContext* context, const ::spike_x::ModelsRequest& request, ::spike_x::ModelsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::spike_x::ModelsResponse>> AsyncGetSynapseModels(::grpc::ClientContext* context, const ::spike_x::ModelsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::spike_x::ModelsResponse>>(AsyncGetSynapseModelsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::spike_x::ModelsResponse>> PrepareAsyncGetSynapseModels(::grpc::ClientContext* context, const ::spike_x::ModelsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::spike_x::ModelsResponse>>(PrepareAsyncGetSynapseModelsRaw(context, request, cq));
    }
    virtual ::grpc::Status GetAxonModels(::grpc::ClientContext* context, const ::spike_x::ModelsRequest& request, ::spike_x::ModelsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::spike_x::ModelsResponse>> AsyncGetAxonModels(::grpc::ClientContext* context, const ::spike_x::ModelsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::spike_x::ModelsResponse>>(AsyncGetAxonModelsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::spike_x::ModelsResponse>> PrepareAsyncGetAxonModels(::grpc::ClientContext* context, const ::spike_x::ModelsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::spike_x::ModelsResponse>>(PrepareAsyncGetAxonModelsRaw(context, request, cq));
    }
    virtual ::grpc::Status GetDendriteModels(::grpc::ClientContext* context, const ::spike_x::ModelsRequest& request, ::spike_x::ModelsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::spike_x::ModelsResponse>> AsyncGetDendriteModels(::grpc::ClientContext* context, const ::spike_x::ModelsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::spike_x::ModelsResponse>>(AsyncGetDendriteModelsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::spike_x::ModelsResponse>> PrepareAsyncGetDendriteModels(::grpc::ClientContext* context, const ::spike_x::ModelsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::spike_x::ModelsResponse>>(PrepareAsyncGetDendriteModelsRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void GetNeuronModels(::grpc::ClientContext* context, const ::spike_x::ModelsRequest* request, ::spike_x::ModelsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetNeuronModels(::grpc::ClientContext* context, const ::spike_x::ModelsRequest* request, ::spike_x::ModelsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetSynapseModels(::grpc::ClientContext* context, const ::spike_x::ModelsRequest* request, ::spike_x::ModelsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetSynapseModels(::grpc::ClientContext* context, const ::spike_x::ModelsRequest* request, ::spike_x::ModelsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetAxonModels(::grpc::ClientContext* context, const ::spike_x::ModelsRequest* request, ::spike_x::ModelsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAxonModels(::grpc::ClientContext* context, const ::spike_x::ModelsRequest* request, ::spike_x::ModelsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetDendriteModels(::grpc::ClientContext* context, const ::spike_x::ModelsRequest* request, ::spike_x::ModelsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetDendriteModels(::grpc::ClientContext* context, const ::spike_x::ModelsRequest* request, ::spike_x::ModelsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::spike_x::ModelsResponse>* AsyncGetNeuronModelsRaw(::grpc::ClientContext* context, const ::spike_x::ModelsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::spike_x::ModelsResponse>* PrepareAsyncGetNeuronModelsRaw(::grpc::ClientContext* context, const ::spike_x::ModelsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::spike_x::ModelsResponse>* AsyncGetSynapseModelsRaw(::grpc::ClientContext* context, const ::spike_x::ModelsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::spike_x::ModelsResponse>* PrepareAsyncGetSynapseModelsRaw(::grpc::ClientContext* context, const ::spike_x::ModelsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::spike_x::ModelsResponse>* AsyncGetAxonModelsRaw(::grpc::ClientContext* context, const ::spike_x::ModelsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::spike_x::ModelsResponse>* PrepareAsyncGetAxonModelsRaw(::grpc::ClientContext* context, const ::spike_x::ModelsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::spike_x::ModelsResponse>* AsyncGetDendriteModelsRaw(::grpc::ClientContext* context, const ::spike_x::ModelsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::spike_x::ModelsResponse>* PrepareAsyncGetDendriteModelsRaw(::grpc::ClientContext* context, const ::spike_x::ModelsRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetNeuronModels(::grpc::ClientContext* context, const ::spike_x::ModelsRequest& request, ::spike_x::ModelsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::spike_x::ModelsResponse>> AsyncGetNeuronModels(::grpc::ClientContext* context, const ::spike_x::ModelsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::spike_x::ModelsResponse>>(AsyncGetNeuronModelsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::spike_x::ModelsResponse>> PrepareAsyncGetNeuronModels(::grpc::ClientContext* context, const ::spike_x::ModelsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::spike_x::ModelsResponse>>(PrepareAsyncGetNeuronModelsRaw(context, request, cq));
    }
    ::grpc::Status GetSynapseModels(::grpc::ClientContext* context, const ::spike_x::ModelsRequest& request, ::spike_x::ModelsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::spike_x::ModelsResponse>> AsyncGetSynapseModels(::grpc::ClientContext* context, const ::spike_x::ModelsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::spike_x::ModelsResponse>>(AsyncGetSynapseModelsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::spike_x::ModelsResponse>> PrepareAsyncGetSynapseModels(::grpc::ClientContext* context, const ::spike_x::ModelsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::spike_x::ModelsResponse>>(PrepareAsyncGetSynapseModelsRaw(context, request, cq));
    }
    ::grpc::Status GetAxonModels(::grpc::ClientContext* context, const ::spike_x::ModelsRequest& request, ::spike_x::ModelsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::spike_x::ModelsResponse>> AsyncGetAxonModels(::grpc::ClientContext* context, const ::spike_x::ModelsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::spike_x::ModelsResponse>>(AsyncGetAxonModelsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::spike_x::ModelsResponse>> PrepareAsyncGetAxonModels(::grpc::ClientContext* context, const ::spike_x::ModelsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::spike_x::ModelsResponse>>(PrepareAsyncGetAxonModelsRaw(context, request, cq));
    }
    ::grpc::Status GetDendriteModels(::grpc::ClientContext* context, const ::spike_x::ModelsRequest& request, ::spike_x::ModelsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::spike_x::ModelsResponse>> AsyncGetDendriteModels(::grpc::ClientContext* context, const ::spike_x::ModelsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::spike_x::ModelsResponse>>(AsyncGetDendriteModelsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::spike_x::ModelsResponse>> PrepareAsyncGetDendriteModels(::grpc::ClientContext* context, const ::spike_x::ModelsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::spike_x::ModelsResponse>>(PrepareAsyncGetDendriteModelsRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetNeuronModels(::grpc::ClientContext* context, const ::spike_x::ModelsRequest* request, ::spike_x::ModelsResponse* response, std::function<void(::grpc::Status)>) override;
      void GetNeuronModels(::grpc::ClientContext* context, const ::spike_x::ModelsRequest* request, ::spike_x::ModelsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetSynapseModels(::grpc::ClientContext* context, const ::spike_x::ModelsRequest* request, ::spike_x::ModelsResponse* response, std::function<void(::grpc::Status)>) override;
      void GetSynapseModels(::grpc::ClientContext* context, const ::spike_x::ModelsRequest* request, ::spike_x::ModelsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetAxonModels(::grpc::ClientContext* context, const ::spike_x::ModelsRequest* request, ::spike_x::ModelsResponse* response, std::function<void(::grpc::Status)>) override;
      void GetAxonModels(::grpc::ClientContext* context, const ::spike_x::ModelsRequest* request, ::spike_x::ModelsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetDendriteModels(::grpc::ClientContext* context, const ::spike_x::ModelsRequest* request, ::spike_x::ModelsResponse* response, std::function<void(::grpc::Status)>) override;
      void GetDendriteModels(::grpc::ClientContext* context, const ::spike_x::ModelsRequest* request, ::spike_x::ModelsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::spike_x::ModelsResponse>* AsyncGetNeuronModelsRaw(::grpc::ClientContext* context, const ::spike_x::ModelsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::spike_x::ModelsResponse>* PrepareAsyncGetNeuronModelsRaw(::grpc::ClientContext* context, const ::spike_x::ModelsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::spike_x::ModelsResponse>* AsyncGetSynapseModelsRaw(::grpc::ClientContext* context, const ::spike_x::ModelsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::spike_x::ModelsResponse>* PrepareAsyncGetSynapseModelsRaw(::grpc::ClientContext* context, const ::spike_x::ModelsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::spike_x::ModelsResponse>* AsyncGetAxonModelsRaw(::grpc::ClientContext* context, const ::spike_x::ModelsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::spike_x::ModelsResponse>* PrepareAsyncGetAxonModelsRaw(::grpc::ClientContext* context, const ::spike_x::ModelsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::spike_x::ModelsResponse>* AsyncGetDendriteModelsRaw(::grpc::ClientContext* context, const ::spike_x::ModelsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::spike_x::ModelsResponse>* PrepareAsyncGetDendriteModelsRaw(::grpc::ClientContext* context, const ::spike_x::ModelsRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetNeuronModels_;
    const ::grpc::internal::RpcMethod rpcmethod_GetSynapseModels_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAxonModels_;
    const ::grpc::internal::RpcMethod rpcmethod_GetDendriteModels_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetNeuronModels(::grpc::ServerContext* context, const ::spike_x::ModelsRequest* request, ::spike_x::ModelsResponse* response);
    virtual ::grpc::Status GetSynapseModels(::grpc::ServerContext* context, const ::spike_x::ModelsRequest* request, ::spike_x::ModelsResponse* response);
    virtual ::grpc::Status GetAxonModels(::grpc::ServerContext* context, const ::spike_x::ModelsRequest* request, ::spike_x::ModelsResponse* response);
    virtual ::grpc::Status GetDendriteModels(::grpc::ServerContext* context, const ::spike_x::ModelsRequest* request, ::spike_x::ModelsResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetNeuronModels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetNeuronModels() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetNeuronModels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNeuronModels(::grpc::ServerContext* /*context*/, const ::spike_x::ModelsRequest* /*request*/, ::spike_x::ModelsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNeuronModels(::grpc::ServerContext* context, ::spike_x::ModelsRequest* request, ::grpc::ServerAsyncResponseWriter< ::spike_x::ModelsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetSynapseModels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetSynapseModels() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetSynapseModels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSynapseModels(::grpc::ServerContext* /*context*/, const ::spike_x::ModelsRequest* /*request*/, ::spike_x::ModelsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSynapseModels(::grpc::ServerContext* context, ::spike_x::ModelsRequest* request, ::grpc::ServerAsyncResponseWriter< ::spike_x::ModelsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAxonModels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAxonModels() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetAxonModels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAxonModels(::grpc::ServerContext* /*context*/, const ::spike_x::ModelsRequest* /*request*/, ::spike_x::ModelsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAxonModels(::grpc::ServerContext* context, ::spike_x::ModelsRequest* request, ::grpc::ServerAsyncResponseWriter< ::spike_x::ModelsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetDendriteModels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetDendriteModels() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetDendriteModels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDendriteModels(::grpc::ServerContext* /*context*/, const ::spike_x::ModelsRequest* /*request*/, ::spike_x::ModelsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDendriteModels(::grpc::ServerContext* context, ::spike_x::ModelsRequest* request, ::grpc::ServerAsyncResponseWriter< ::spike_x::ModelsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetNeuronModels<WithAsyncMethod_GetSynapseModels<WithAsyncMethod_GetAxonModels<WithAsyncMethod_GetDendriteModels<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetNeuronModels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetNeuronModels() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::spike_x::ModelsRequest, ::spike_x::ModelsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::spike_x::ModelsRequest* request, ::spike_x::ModelsResponse* response) { return this->GetNeuronModels(context, request, response); }));}
    void SetMessageAllocatorFor_GetNeuronModels(
        ::grpc::MessageAllocator< ::spike_x::ModelsRequest, ::spike_x::ModelsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::spike_x::ModelsRequest, ::spike_x::ModelsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetNeuronModels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNeuronModels(::grpc::ServerContext* /*context*/, const ::spike_x::ModelsRequest* /*request*/, ::spike_x::ModelsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetNeuronModels(
      ::grpc::CallbackServerContext* /*context*/, const ::spike_x::ModelsRequest* /*request*/, ::spike_x::ModelsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetSynapseModels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetSynapseModels() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::spike_x::ModelsRequest, ::spike_x::ModelsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::spike_x::ModelsRequest* request, ::spike_x::ModelsResponse* response) { return this->GetSynapseModels(context, request, response); }));}
    void SetMessageAllocatorFor_GetSynapseModels(
        ::grpc::MessageAllocator< ::spike_x::ModelsRequest, ::spike_x::ModelsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::spike_x::ModelsRequest, ::spike_x::ModelsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetSynapseModels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSynapseModels(::grpc::ServerContext* /*context*/, const ::spike_x::ModelsRequest* /*request*/, ::spike_x::ModelsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetSynapseModels(
      ::grpc::CallbackServerContext* /*context*/, const ::spike_x::ModelsRequest* /*request*/, ::spike_x::ModelsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetAxonModels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetAxonModels() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::spike_x::ModelsRequest, ::spike_x::ModelsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::spike_x::ModelsRequest* request, ::spike_x::ModelsResponse* response) { return this->GetAxonModels(context, request, response); }));}
    void SetMessageAllocatorFor_GetAxonModels(
        ::grpc::MessageAllocator< ::spike_x::ModelsRequest, ::spike_x::ModelsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::spike_x::ModelsRequest, ::spike_x::ModelsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetAxonModels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAxonModels(::grpc::ServerContext* /*context*/, const ::spike_x::ModelsRequest* /*request*/, ::spike_x::ModelsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAxonModels(
      ::grpc::CallbackServerContext* /*context*/, const ::spike_x::ModelsRequest* /*request*/, ::spike_x::ModelsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetDendriteModels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetDendriteModels() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::spike_x::ModelsRequest, ::spike_x::ModelsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::spike_x::ModelsRequest* request, ::spike_x::ModelsResponse* response) { return this->GetDendriteModels(context, request, response); }));}
    void SetMessageAllocatorFor_GetDendriteModels(
        ::grpc::MessageAllocator< ::spike_x::ModelsRequest, ::spike_x::ModelsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::spike_x::ModelsRequest, ::spike_x::ModelsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetDendriteModels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDendriteModels(::grpc::ServerContext* /*context*/, const ::spike_x::ModelsRequest* /*request*/, ::spike_x::ModelsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetDendriteModels(
      ::grpc::CallbackServerContext* /*context*/, const ::spike_x::ModelsRequest* /*request*/, ::spike_x::ModelsResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetNeuronModels<WithCallbackMethod_GetSynapseModels<WithCallbackMethod_GetAxonModels<WithCallbackMethod_GetDendriteModels<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetNeuronModels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetNeuronModels() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetNeuronModels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNeuronModels(::grpc::ServerContext* /*context*/, const ::spike_x::ModelsRequest* /*request*/, ::spike_x::ModelsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetSynapseModels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetSynapseModels() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetSynapseModels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSynapseModels(::grpc::ServerContext* /*context*/, const ::spike_x::ModelsRequest* /*request*/, ::spike_x::ModelsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAxonModels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAxonModels() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetAxonModels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAxonModels(::grpc::ServerContext* /*context*/, const ::spike_x::ModelsRequest* /*request*/, ::spike_x::ModelsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetDendriteModels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetDendriteModels() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetDendriteModels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDendriteModels(::grpc::ServerContext* /*context*/, const ::spike_x::ModelsRequest* /*request*/, ::spike_x::ModelsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetNeuronModels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetNeuronModels() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetNeuronModels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNeuronModels(::grpc::ServerContext* /*context*/, const ::spike_x::ModelsRequest* /*request*/, ::spike_x::ModelsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNeuronModels(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetSynapseModels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetSynapseModels() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetSynapseModels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSynapseModels(::grpc::ServerContext* /*context*/, const ::spike_x::ModelsRequest* /*request*/, ::spike_x::ModelsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSynapseModels(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAxonModels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAxonModels() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetAxonModels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAxonModels(::grpc::ServerContext* /*context*/, const ::spike_x::ModelsRequest* /*request*/, ::spike_x::ModelsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAxonModels(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetDendriteModels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetDendriteModels() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetDendriteModels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDendriteModels(::grpc::ServerContext* /*context*/, const ::spike_x::ModelsRequest* /*request*/, ::spike_x::ModelsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDendriteModels(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetNeuronModels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetNeuronModels() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetNeuronModels(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetNeuronModels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNeuronModels(::grpc::ServerContext* /*context*/, const ::spike_x::ModelsRequest* /*request*/, ::spike_x::ModelsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetNeuronModels(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetSynapseModels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetSynapseModels() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetSynapseModels(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetSynapseModels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSynapseModels(::grpc::ServerContext* /*context*/, const ::spike_x::ModelsRequest* /*request*/, ::spike_x::ModelsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetSynapseModels(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetAxonModels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetAxonModels() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetAxonModels(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetAxonModels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAxonModels(::grpc::ServerContext* /*context*/, const ::spike_x::ModelsRequest* /*request*/, ::spike_x::ModelsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAxonModels(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetDendriteModels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetDendriteModels() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetDendriteModels(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetDendriteModels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDendriteModels(::grpc::ServerContext* /*context*/, const ::spike_x::ModelsRequest* /*request*/, ::spike_x::ModelsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetDendriteModels(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetNeuronModels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetNeuronModels() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::spike_x::ModelsRequest, ::spike_x::ModelsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::spike_x::ModelsRequest, ::spike_x::ModelsResponse>* streamer) {
                       return this->StreamedGetNeuronModels(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetNeuronModels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetNeuronModels(::grpc::ServerContext* /*context*/, const ::spike_x::ModelsRequest* /*request*/, ::spike_x::ModelsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetNeuronModels(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::spike_x::ModelsRequest,::spike_x::ModelsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetSynapseModels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetSynapseModels() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::spike_x::ModelsRequest, ::spike_x::ModelsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::spike_x::ModelsRequest, ::spike_x::ModelsResponse>* streamer) {
                       return this->StreamedGetSynapseModels(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetSynapseModels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetSynapseModels(::grpc::ServerContext* /*context*/, const ::spike_x::ModelsRequest* /*request*/, ::spike_x::ModelsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetSynapseModels(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::spike_x::ModelsRequest,::spike_x::ModelsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAxonModels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetAxonModels() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::spike_x::ModelsRequest, ::spike_x::ModelsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::spike_x::ModelsRequest, ::spike_x::ModelsResponse>* streamer) {
                       return this->StreamedGetAxonModels(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetAxonModels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAxonModels(::grpc::ServerContext* /*context*/, const ::spike_x::ModelsRequest* /*request*/, ::spike_x::ModelsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAxonModels(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::spike_x::ModelsRequest,::spike_x::ModelsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetDendriteModels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetDendriteModels() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::spike_x::ModelsRequest, ::spike_x::ModelsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::spike_x::ModelsRequest, ::spike_x::ModelsResponse>* streamer) {
                       return this->StreamedGetDendriteModels(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetDendriteModels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetDendriteModels(::grpc::ServerContext* /*context*/, const ::spike_x::ModelsRequest* /*request*/, ::spike_x::ModelsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetDendriteModels(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::spike_x::ModelsRequest,::spike_x::ModelsResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetNeuronModels<WithStreamedUnaryMethod_GetSynapseModels<WithStreamedUnaryMethod_GetAxonModels<WithStreamedUnaryMethod_GetDendriteModels<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetNeuronModels<WithStreamedUnaryMethod_GetSynapseModels<WithStreamedUnaryMethod_GetAxonModels<WithStreamedUnaryMethod_GetDendriteModels<Service > > > > StreamedService;
};

}  // namespace spike_x


#endif  // GRPC_models_2eproto__INCLUDED
